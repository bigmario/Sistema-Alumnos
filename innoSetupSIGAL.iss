; Script generated by the Inno Setup Script Wizard.
; SEE THE DOCUMENTATION FOR DETAILS ON CREATING INNO SETUP SCRIPT FILES!

#define MyAppName "Gestion Alumnos Nucleos FUNDAMUSICAL"
#define MyAppVersion "1.0"
#define MyAppPublisher "Fundación Musical Simón Bolívar"
#define MyAppURL "http://www.fundamusical.org.ve"
#define MyAppExeName "alumnos.exe"

[Setup]
; NOTE: The value of AppId uniquely identifies this application.
; Do not use the same AppId value in installers for other applications.
; (To generate a new GUID, click Tools | Generate GUID inside the IDE.)
AppId={{54386D3D-08DC-4376-AE28-2963733B2F5D}
AppName={#MyAppName}
AppVersion={#MyAppVersion}
;AppVerName={#MyAppName} {#MyAppVersion}
AppPublisher={#MyAppPublisher}
AppPublisherURL={#MyAppURL}
AppSupportURL={#MyAppURL}
AppUpdatesURL={#MyAppURL}
DefaultDirName={userpf}\SIGAL FUNDAMUSICAL
DefaultGroupName={#MyAppName}
LicenseFile=C:\Users\Mario Castro\Documents\Proyectos\Sistema Alumnos\SIGAL\license\copying
OutputDir=C:\Users\Mario Castro\Documents\Proyectos\Sistema Alumnos\SIGAL
OutputBaseFilename=setup_SIGAL_FUNDAMUSICAL
Compression=lzma
SolidCompression=yes
PrivilegesRequired=lowest

[Languages]
Name: "spanish"; MessagesFile: "compiler:Languages\Spanish.isl"

[Tasks]
Name: "desktopicon"; Description: "{cm:CreateDesktopIcon}"; GroupDescription: "{cm:AdditionalIcons}"; Flags: unchecked

[Files]
Source: "C:\Users\Mario Castro\Documents\Proyectos\Sistema Alumnos\SIGAL\alumnos.exe"; DestDir: "{app}"; Flags: ignoreversion
Source: "C:\Users\Mario Castro\Documents\Proyectos\Sistema Alumnos\SIGAL\*"; DestDir: "{app}"; Flags: ignoreversion recursesubdirs createallsubdirs
; NOTE: Don't use "Flags: ignoreversion" on any shared system files

[Icons]
Name: "{group}\{#MyAppName}"; Filename: "{app}\{#MyAppExeName}"
Name: "{group}\{cm:UninstallProgram,{#MyAppName}}"; Filename: "{uninstallexe}"
Name: "{commondesktop}\{#MyAppName}"; Filename: "{app}\{#MyAppExeName}"; Tasks: desktopicon

[Run]
Filename: "{app}\{#MyAppExeName}"; Description: "{cm:LaunchProgram,{#StringChange(MyAppName, '&', '&&')}}"; Flags: nowait postinstall runascurrentuser skipifsilent

[Code]

const
    NL = #13#10;    //carriage return and line feed

function GetAcrobatReaderVersion(): String;
var
  sVersion:  String;
begin
  sVersion := '';
  RegQueryStringValue( HKLM, 'SOFTWARE\Microsoft\Windows\CurrentVersion\App Paths\AcroRd32.exe',
     '', sVersion );
  GetVersionNumbersString( sVersion , sVersion );
  Result := sVersion;
end;


function NextButtonClick(CurPage: Integer): Boolean;
begin

  // by default go to next page
  Result := true;

  if CurPage = wpWelcome then
  begin

    if Length( GetAcrobatReaderVersion() ) = 0 then
    begin
      MsgBox( 'Acrobat Reader no se encuentra instalado, debe instalarlo primero',  mbInformation, MB_OK );
      Result := false;
    end;
  end;

end;

//*********************************************************************************
//gets language used in the setup. returns language code in lower case
//*********************************************************************************
function GetLangCode() : String;
begin
  Result := Lowercase( ExpandConstant('{language}') )
end;

//**************************\\\
//***uninstallation stuff***\\\
//**************************\\\

//confirm file deletion and then delete the file
function DeleteOneFile(sFullFilePath: String): Boolean;
var
  iAns: Integer;
  SucInDel: Boolean;
  sTxt: String;

begin
  //get language specific text strings
  sTxt := 'Este archivo de usuario todavía está presente y ya no es necesario por el programa.' +NL+ '¿Te gustaría borrar?'   ;
  iAns := MsgBox(sFullFilePath +NL+NL+ sTxt, mbConfirmation, MB_YESNO or MB_DEFBUTTON2);
  if iAns = IDYES then SucInDel := DeleteFile(sFullFilePath);
end;


//*********************************************************************************
//cycles through all files that match a spec and then
//asks the user if they would like to delete them.
//*********************************************************************************
procedure DeleteManyFiles(sPattern: String);
var
 PathD: String;
 FileD: String;
 ExistsD: Boolean;
 FindRec: TFindRec;

begin

 //test to see if a files matching a pattern still exists. if they do exist then we
 //ask the user if they want to delete each one
 PathD := AddBackslash(ExpandConstant('{app}'))
 if FindFirst(ExpandConstant(PathD + sPattern), FindRec) then begin
   try
     repeat
       //only check files and not directories
       if FindRec.Attributes and FILE_ATTRIBUTE_DIRECTORY = 0 then
         //we found one file that matches our wildcards
         begin

            //FindFirst returns the name of the file with no path so must account for that
            FileD := PathD + FindRec.Name
            ExistsD := FileExists(FileD);

            //ask to delete the found file
            if ExistsD = true then DeleteOneFile(FileD);
         end;
     until not FindNext(FindRec);
   finally
     FindClose(FindRec);
   end;
 end;
end;

//*********************************************************************************
//deletes (with prompt) three individual files.
//deletes (with prompt) all files that match a pattern
//*********************************************************************************
procedure DeleteUserFiles();
var
 FileA: String;
 ExistsA: Boolean;

begin
 //test to see if the INI file and LOG files still exist
 FileA := ExpandConstant('{app}\logSistemaALumnos.log');
 ExistsA := FileExists(FileA);

 //ask to delete the INI and LOG files
 if ExistsA = true then DeleteOneFile(FileA);
end;

//*********************************************************************************
//this is the main calling point when the uninstall begins. we do this because the
//folder will be automatically be deleted at the END of this step, IF the folder no
//longer contains any files
//*********************************************************************************
procedure CurUninstallStepChanged(CurUninstallStep: TUninstallStep);
begin
 case CurUninstallStep of
   usUninstall:
     begin
       DeleteUserFiles;
     end;
 end;
end;

